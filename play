#!/usr/bin/env python

import sys, os, configparser
from polo.mallet import Mallet

# Get command line arguments -- we expect project and trial at a minimum
args = len(sys.argv)

if args < 3:
    print('Wrong number of arguments. You need at least two (project and trial)')
    sys.exit(0)

# Is the project defined and does the directory exist?
project = sys.argv[1]
print('OK Project is', project)
if os.path.exists("projects/%s" % project):
    print('OK Project directory exists')
else:
    print('NOT OK Project directory does not exist. Create one under projects')
    sys.exit(0)

# Is the trial defined and does the directory exist?
trial = sys.argv[2]
print('OK Trial is',trial)
if os.path.exists('projects/%s/trials/%s' % (project,trial)):
    print('OK Trial directory exists')
else:
    print('NOT OK Trial directory does not exist. Create one under your pojects directory')
    sys.exit(0)

# Handle extra arguments that may override of topic nums (z) and iterations
z = 0
if args >= 4:
    try:
        z = int(sys.argv[3]) 
        print('OK Z override is',z)
    except:
        print('NOT OK Z value is not an integer')
        sys.exit(0)

iterations = 0
if args >= 5:
    try:
        iterations = int(sys.argv[4])
        print('OK Iterations override is',iterations)
    except:
        print('NOT OK Iterations value is not an integer')
        sys.exit(0)

# Does the play config exist?
play_config_file = 'config-play.ini'
if os.path.exists(play_config_file):
    print('OK Play config file exists')
else:
    print('NOT OK Play config file does not exist. Create config-play.ini in this project directory');
    sys.exit(0)
play_config = configparser.ConfigParser()
play_config.read(play_config_file)

# Can mallet be found?
mallet_path = play_config['DEFAULT']['mallet_path']
if os.path.exists(mallet_path):
    print('OK mallet found')
else:
    print('NOT OK mallet not found')
    sys.exit(0)

# Can a projects path be found?
projects_path = play_config['DEFAULT']['projects_path']
if os.path.exists(mallet_path):
    print('OK projects path found')
else:
    print('NOT REALLY OK A projects path was not found. Using default (projects)')
    projects_path = 'projects'

# Does the project config exist?
config_file = '%s/%s/config.ini' % (projects_path,project)
if os.path.exists(config_file):
    print('OK Project config file exists')
else:
    print('NOT OK Project config file does not exist. Create config.ini in your project directory'); sys.exit(0)
config = configparser.ConfigParser()
config.read(config_file)

# Check ifthings are defined ...
if trial in config.keys():
    print('OK Trial defined in project config')
else:
    print('NOT OK Trial not defined in project config'); sys.exit()

# Create the Polo object
print('HEY Creating Mallet wrapper object')
p = Mallet(project,trial,mallet_path)

# Change number of topics if passed
if z:
    print('HEY Updating Z to {0}, as suggested'.format(z))
    p.mallet['train-topics']['num-topics'] = z
if iterations:
    print('HEY Updating Iterations to {0}, as suggested'.format(iterations))
    p.mallet['train-topics']['num-iterations'] = iterations

# CORPUS -> MALLET

# Run mallet to create the mallet file
print('HEY Importing mallet file')
p.mallet_import()

# Run mallet to generate the model
print('HEY Training topics and generating output files. Mallet is going to talk for a while.\n')
p.mallet_train()
print('OK Mallet is finished doing its thing')

# MALLET -> SQLITE

# Generate the SQL
print('HEY Generating the SQL')
p.create_table_defs()

# Do the imports
print('HEY Importing the model')
p.import_model()

# Say bye
print('OK Done with everything.')

# Share the love
dbfile = p.generate_dbfilename()
print('-' * 80)
print('Enter the following to see your new database right away:')
print('\tsqlite3', dbfile)
print('-' * 80)
sys.exit(0)
